/*============ Google fonts ============*/
@import url('https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,100..900;1,100..900&display=swap');

/*======= CSS variables =======*/

/*======= Main CSS =======*/
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: "Roboto", sans-serif;
}

body {
    font-family: "Roboto", sans-serif;
    background: #0A0A0B !important;
    overflow-x: hidden;

}

.main-box {
    margin: 0 5% !important;

}

.row-box {
    display: flex;
    justify-content: center;
    align-items: center;
}

p {
    color: #efefef;
    line-height: 26px;
}

.clr {
    color: $brand-color;
}

::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-thumb {
    background: #f9b217;
    border-radius: 0px;
}


h1,
h2,
h3,
h4,
h5,
h6 {
    font-family: "Roboto", sans-serif !important;
}


// ================== container


.container {
    width: 100%;
    padding-right: 15px;
    padding-left: 15px;
    margin-right: auto;
    margin-left: auto;
}

@media (min-width: 576px) {
    .container {
        max-width: 540px;
    }
}

@media (min-width: 768px) {
    .container {
        max-width: 720px;
    }
}

@media (min-width: 992px) {
    .container {
        max-width: 960px;
    }
}

@media (min-width: 1200px) {
    .container {
        max-width: 1140px;
    }
}

@media (min-width: 1400px) {
    .container {
        max-width: 1280px !important;
    }
}

@media (min-width: 1600px) {
    .container {
        max-width: 1380px !important;
    }
}

@media (min-width: 1920px) {
    .container {
        max-width: 1500px !important;
    }
}

// ================== container


@mixin d-flex {
    display: flex;
    justify-content: center;
    align-items: center;
    flex-wrap: wrap;
}

@mixin flex-column {
    display: flex;
    justify-content: center;
    align-items: center;
    flex-direction: column;
}

@mixin white {
    color: #fff;
}

@mixin f-color {
    color: #d1d1d1;
}

@mixin p {
    color: #fff;
    line-height: 26px;
}

@mixin d-n {
    @include respond-below(sm) {
        display: none;
    }
}

@mixin h1 {
    font-size: 5rem;
    color: #fff;
    font-weight: 600;

    @include respond-below(xxl) {
        font-size: 4.5rem;
    }

    @include respond-below(xl) {
        font-size: 4.2rem;
    }

    @include respond-below(lg) {
        font-size: 3.5rem;
    }

    @include respond-below(md) {
        font-size: 2.9rem;
    }

    @include respond-below(sm) {
        font-size: 2.3rem;
    }
}

@mixin h2 {
    font-size: 3.5rem;
    color: #fff;
    font-weight: 600;

    @include respond-below(xxl) {
        font-size: 3.2rem;
    }

    @include respond-below(xl) {
        font-size: 3rem;
    }

    @include respond-below(lg) {
        font-size: 2.5rem;
    }

    @include respond-below(md) {
        font-size: 2.1rem;
    }

    @include respond-below(sm) {
        font-size: 1.8rem;
    }
}

@mixin h3 {
    font-size: 3.2rem;
    color: #fff;
    font-weight: 600;

    @include respond-below(xxl) {
        font-size: 3rem;
    }

    @include respond-below(xl) {
        font-size: 2.8rem;
    }

    @include respond-below(lg) {
        font-size: 2.2rem;
    }

    @include respond-below(md) {
        font-size: 1.9rem;
    }

    @include respond-below(sm) {
        font-size: 1.5rem;
    }
}

@mixin h4 {
    font-size: 1.8rem;
    color: #fff;
    font-weight: 500;

    @include respond-below(xxl) {
        font-size: 1.7rem;
    }

    @include respond-below(xl) {
        font-size: 1.7rem;
    }

    @include respond-below(lg) {
        font-size: 2rem;
    }

    @include respond-below(md) {
        font-size: 1.8rem;
    }

    @include respond-below(sm) {
        font-size: 1.5rem;
    }
}

@mixin h5 {
    font-size: 1.3rem;
    color: #fff;
    font-weight: 500;

    @include respond-below(xxl) {
        font-size: 1.3rem;
    }

    @include respond-below(xl) {
        font-size: 1.1rem;
    }

    @include respond-below(lg) {
        font-size: 1.1rem;
    }

    @include respond-below(md) {
        font-size: 1rem;
    }

    @include respond-below(sm) {
        font-size: 1rem;
    }
}

@mixin h6 {
    font-size: 1rem;
    color: #fff;

    @include respond-below(xxl) {
        font-size: 1rem;
    }

    @include respond-below(xl) {
        font-size: 1rem;
    }

    @include respond-below(lg) {
        font-size: 1rem;
    }

    @include respond-below(md) {
        font-size: 15px;
    }

    @include respond-below(sm) {
        font-size: 15px;
    }
}

//
//  MEDIA QUERIES
//––––––––––––––––––––––––––––––––––––––––––––––––––

// A map of breakpoints.
$breakpoints: (
    xs: 375px,
    sm: 640px,
    md: 992px,
    lg: 1200px,
    xl: 1600px,
    custom-tablet: 768px
);


//
//  RESPOND ABOVE
//––––––––––––––––––––––––––––––––––––––––––––––––––

// @include respond-above(sm) {}
@mixin respond-above($breakpoint) {

    // If the breakpoint exists in the map.
    @if map-has-key($breakpoints, $breakpoint) {

        // Get the breakpoint value.
        $breakpoint-value: map-get($breakpoints, $breakpoint);

        // Write the media query.
        @media (min-width: $breakpoint-value) {
            @content;
        }

        // If the breakpoint doesn't exist in the map.
    }

    @else {

        // Log a warning.
        @warn 'Invalid breakpoint: #{$breakpoint}.';
    }
}




//
//  RESPOND BELOW
//––––––––––––––––––––––––––––––––––––––––––––––––––

// @include respond-below(sm) {}
@mixin respond-below($breakpoint) {

    // If the breakpoint exists in the map.
    @if map-has-key($breakpoints, $breakpoint) {

        // Get the breakpoint value.
        $breakpoint-value: map-get($breakpoints, $breakpoint);

        // Write the media query.
        @media (max-width: ($breakpoint-value - 1)) {
            @content;
        }

        // If the breakpoint doesn't exist in the map.
    }

    @else {

        // Log a warning.
        @warn 'Invalid breakpoint: #{$breakpoint}.';
    }
}


//
//  RESPOND BETWEEN
//––––––––––––––––––––––––––––––––––––––––––––––––––

// @include respond-between(sm, md) {}
@mixin respond-between($lower, $upper) {

    // If both the lower and upper breakpoints exist in the map.
    @if map-has-key($breakpoints, $lower) and map-has-key($breakpoints, $upper) {

        // Get the lower and upper breakpoints.
        $lower-breakpoint: map-get($breakpoints, $lower);
        $upper-breakpoint: map-get($breakpoints, $upper);

        // Write the media query.
        @media (min-width: $lower-breakpoint) and (max-width: ($upper-breakpoint - 1)) {
            @content;
        }

        // If one or both of the breakpoints don't exist.
    }

    @else {

        // If lower breakpoint is invalid.
        @if (map-has-key($breakpoints, $lower)==false) {

            // Log a warning.
            @warn 'Your lower breakpoint was invalid: #{$lower}.';
        }

        // If upper breakpoint is invalid.
        @if (map-has-key($breakpoints, $upper)==false) {

            // Log a warning.
            @warn 'Your upper breakpoint was invalid: #{$upper}.';
        }
    }
}